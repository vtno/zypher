// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/auth/authentication.go

// Package auth is a generated GoMock package.
package auth

import (
	rsa "crypto/rsa"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPubKeyProvider is a mock of PubKeyProvider interface.
type MockPubKeyProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPubKeyProviderMockRecorder
}

// MockPubKeyProviderMockRecorder is the mock recorder for MockPubKeyProvider.
type MockPubKeyProviderMockRecorder struct {
	mock *MockPubKeyProvider
}

// NewMockPubKeyProvider creates a new mock instance.
func NewMockPubKeyProvider(ctrl *gomock.Controller) *MockPubKeyProvider {
	mock := &MockPubKeyProvider{ctrl: ctrl}
	mock.recorder = &MockPubKeyProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubKeyProvider) EXPECT() *MockPubKeyProviderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPubKeyProvider) Get() (*rsa.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(*rsa.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPubKeyProviderMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPubKeyProvider)(nil).Get))
}
